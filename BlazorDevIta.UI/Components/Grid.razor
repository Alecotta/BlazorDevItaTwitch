<!-- Si definisce un generic -->
@typeparam GridItemType where GridItemType : BaseListItem<IdType>
@typeparam IdType
@inject IConfirmService confirmService

<h1>List Items</h1>

<button class="btn btn-primary" @onclick="OnCreate">
    Create Item
</button>

<input type="text" class="form-control" 
    @bind-value="pageParameters.FilterText"
    @onkeyup="@(async (e) => { if(e.Key == "Enter") await OnPageRequest.InvokeAsync(pageParameters); })" />

@if (Page?.Items?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                @foreach(var property in properties)
                {
                    var display = property.GetCustomAttribute<DisplayAttribute>();
                    <th @onclick="() => RequireColumnSort(property.Name)">
                        <i class="oi oi-sort-@(Page.OrderBy == property.Name
                            ? Page.OrderByDirection == OrderDirection.Ascendent 
                                ? "ascending" : "descending"
                            : null)" />
                        <!-- Nome proprietà dell'oggetto -->
                        @(display == null ? property.Name : display.Name)
                    </th>
                }
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Page.Items)
            {
                <tr>

                    @foreach(var property in properties)
                    {
                        <!-- Valore della proprietà -->
                        var value = property.GetValue(item);
                        <!-- Viene recuperato il custom attribute -->
                        var displayFormat = property.GetCustomAttribute<DisplayFormatAttribute>();
                        <td>
                            @(displayFormat?.DataFormatString == null ? value : String.Format(displayFormat.DataFormatString, value))
                        </td>
                    }
                    <td>
                        <button class="btn btn-warning" 
                            @onclick="(() => OnEdit.InvokeAsync(item))">
                            Edit
                        </button>
                        <button class="btn btn-danger" 
                            @onclick="(() => RequestDelete(item))">
                            Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Page navigation example">
      <ul class="pagination">
        @if (Page.CurrentPage > 1)
        {
            <li class="page-item" @onclick="(() => RequestPage(Page.CurrentPage - 1))"><a class="page-link">Previous</a></li>       
        }

        @for(var page = 1; page <= Page.PageCount; page++)
        {
            var currentPage = page;
            <li class="page-item @(Page.CurrentPage == currentPage ? "active" : null)" @onclick="(() => RequestPage(currentPage))"><a class="page-link">@currentPage</a></li>       
        }

        @if(Page.CurrentPage < Page.PageCount)
        {
            <li class="page-item" @onclick="(() => RequestPage(Page.CurrentPage + 1))"><a class="page-link">Next</a></li>       
        }
      </ul>
    </nav>
}
else
{
    <div>
        <span>No Data Available</span>
    </div>
}

<Confirm ConfirmId="GridConfirm" OnCofirm="ConfirmDelete" />   
<!-- <Confirm @ref="confirmDelete" ConfirmId="GridConfirm" OnCofirm="ConfirmDelete" /> -->  


@code {
    //Recupero le proprietà del tipo generico.
    private PropertyInfo[] properties =
        typeof(GridItemType).GetProperties()
        .Where(x => x.GetCustomAttribute<HiddenAttribute>() == null)
        .ToArray();

    //Viene impostato lo stato dei parameters.
    private PageParameters pageParameters = new PageParameters();

    [Parameter]
    public Page<GridItemType, IdType>? Page { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnEdit { get; set; }

    [Parameter]
    public EventCallback<GridItemType> OnDelete { get; set; }

    [Parameter]
    public EventCallback<PageParameters> OnPageRequest { get; set; }

    public async Task RequireColumnSort(string propertyName)
    {
        //Se stavo ordinando su una colonna diversa, questa è la nuova colonna di ordinamento.
        if(pageParameters.OrderBy != propertyName)
        {
            pageParameters.OrderBy = propertyName;
            pageParameters.OrderByDirection = OrderDirection.Descendent;
        }
        else
        {
            pageParameters.OrderByDirection =
                pageParameters.OrderByDirection == OrderDirection.Descendent
                ? OrderDirection.Ascendent : OrderDirection.Descendent;
        }

        await OnPageRequest.InvokeAsync(pageParameters);
    }

    public async Task RequestPage(int page)
    {
        pageParameters.Page = page;
        await OnPageRequest.InvokeAsync(pageParameters);
    }

    private GridItemType? itemToDelete = null;
    //private Confirm? confirmDelete = null;

    public async Task ConfirmDelete()
    {
        if(itemToDelete is not null)
        {
            await OnDelete.InvokeAsync(itemToDelete);   
        }

        //Non si deve utilizzare un riferimento all'istanza di un componente perché si crea accoppiamento.
        /*if(confirmDelete is not null)
            {
            await confirmDelete.HideConfirm();
        }*/

        if (confirmService is not null)
        {
            await confirmService.HideConfirm("GridConfirm");   
        }
    }

    public async Task RequestDelete(GridItemType item)
    {
        itemToDelete = item;

        /*if(confirmDelete is not null)
            {
            await confirmDelete.ShowConfirm();
        }*/
        if (confirmService is not null)
        {
            await confirmService.ShowConfirm("GridConfirm");   
        }

    }
}